{
	"@type": "VoyageSimpleNodesLibrary",
	"version": 1,
	"definitions": [
		{
			"category": "Uncategorized",
			"description": "Convert degrees to radians.",
			"name": "radians",
			"inputs": [
				{
					"type": "float",
					"name": "degrees"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = radians({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Convert degrees to radians.",
			"name": "radians",
			"inputs": [
				{
					"type": "vec2",
					"name": "degrees"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = radians({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Convert degrees to radians.",
			"name": "radians",
			"inputs": [
				{
					"type": "vec3",
					"name": "degrees"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = radians({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Convert degrees to radians.",
			"name": "radians",
			"inputs": [
				{
					"type": "vec4",
					"name": "degrees"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = radians({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Convert radians to degrees.",
			"name": "degrees",
			"inputs": [
				{
					"type": "float",
					"name": "radians"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = degrees({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Convert radians to degrees.",
			"name": "degrees",
			"inputs": [
				{
					"type": "vec2",
					"name": "radians"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = degrees({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Convert radians to degrees.",
			"name": "degrees",
			"inputs": [
				{
					"type": "vec3",
					"name": "radians"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = degrees({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Convert radians to degrees.",
			"name": "degrees",
			"inputs": [
				{
					"type": "vec4",
					"name": "radians"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = degrees({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sine.",
			"name": "sin",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = sin({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sine.",
			"name": "sin",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = sin({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sine.",
			"name": "sin",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = sin({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sine.",
			"name": "sin",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = sin({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Cosine.",
			"name": "cos",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = cos({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Cosine.",
			"name": "cos",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = cos({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Cosine.",
			"name": "cos",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = cos({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Cosine.",
			"name": "cos",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = cos({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Tangent.",
			"name": "tan",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = tan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Tangent.",
			"name": "tan",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = tan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Tangent.",
			"name": "tan",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = tan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Tangent.",
			"name": "tan",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = tan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Arcsine.",
			"name": "asin",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = asin({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Arcsine.",
			"name": "asin",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = asin({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Arcsine.",
			"name": "asin",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = asin({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Arcsine.",
			"name": "asin",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = asin({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Arccosine.",
			"name": "acos",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = acos({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Arccosine.",
			"name": "acos",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = acos({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Arccosine.",
			"name": "acos",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = acos({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Arccosine.",
			"name": "acos",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = acos({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Arctangent.",
			"name": "atan",
			"inputs": [
				{
					"type": "float",
					"name": "y_over_x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = atan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Arctangent.",
			"name": "atan",
			"inputs": [
				{
					"type": "vec2",
					"name": "y_over_x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = atan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Arctangent.",
			"name": "atan",
			"inputs": [
				{
					"type": "vec3",
					"name": "y_over_x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = atan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Arctangent.",
			"name": "atan",
			"inputs": [
				{
					"type": "vec4",
					"name": "y_over_x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = atan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Arctangent.",
			"name": "atan",
			"inputs": [
				{
					"type": "float",
					"name": "y"
				},
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = atan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Arctangent.",
			"name": "atan",
			"inputs": [
				{
					"type": "vec2",
					"name": "y"
				},
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = atan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Arctangent.",
			"name": "atan",
			"inputs": [
				{
					"type": "vec3",
					"name": "y"
				},
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = atan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Arctangent.",
			"name": "atan",
			"inputs": [
				{
					"type": "vec4",
					"name": "y"
				},
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = atan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Hyperbolic sine.",
			"name": "sinh",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = sinh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Hyperbolic sine.",
			"name": "sinh",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = sinh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Hyperbolic sine.",
			"name": "sinh",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = sinh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Hyperbolic sine.",
			"name": "sinh",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = sinh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Hyperbolic cosine.",
			"name": "cosh",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = cosh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Hyperbolic cosine.",
			"name": "cosh",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = cosh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Hyperbolic cosine.",
			"name": "cosh",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = cosh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Hyperbolic cosine.",
			"name": "cosh",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = cosh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Hyperbolic tangent.",
			"name": "tanh",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = tanh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Hyperbolic tangent.",
			"name": "tanh",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = tanh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Hyperbolic tangent.",
			"name": "tanh",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = tanh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Hyperbolic tangent.",
			"name": "tanh",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = tanh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Inverse hyperbolic sine.",
			"name": "asinh",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = asinh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Inverse hyperbolic sine.",
			"name": "asinh",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = asinh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Inverse hyperbolic sine.",
			"name": "asinh",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = asinh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Inverse hyperbolic sine.",
			"name": "asinh",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = asinh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Inverse hyperbolic cosine.",
			"name": "acosh",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = acosh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Inverse hyperbolic cosine.",
			"name": "acosh",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = acosh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Inverse hyperbolic cosine.",
			"name": "acosh",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = acosh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Inverse hyperbolic cosine.",
			"name": "acosh",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = acosh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Inverse hyperbolic tangent.",
			"name": "atanh",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = atanh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Inverse hyperbolic tangent.",
			"name": "atanh",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = atanh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Inverse hyperbolic tangent.",
			"name": "atanh",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = atanh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Inverse hyperbolic tangent.",
			"name": "atanh",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = atanh({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Power (undefined if x < 0 or if x == 0 and y <= 0).",
			"name": "pow",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = pow({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Power (undefined if x < 0 or if x == 0 and y <= 0).",
			"name": "pow",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				},
				{
					"type": "vec2",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = pow({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Power (undefined if x < 0 or if x == 0 and y <= 0).",
			"name": "pow",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = pow({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Power (undefined if x < 0 or if x == 0 and y <= 0).",
			"name": "pow",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				},
				{
					"type": "vec4",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = pow({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Base-e exponential.",
			"name": "exp",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = exp({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Base-e exponential.",
			"name": "exp",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = exp({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Base-e exponential.",
			"name": "exp",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = exp({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Base-e exponential.",
			"name": "exp",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = exp({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Base-2 exponential.",
			"name": "exp2",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = exp2({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Base-2 exponential.",
			"name": "exp2",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = exp2({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Base-2 exponential.",
			"name": "exp2",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = exp2({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Base-2 exponential.",
			"name": "exp2",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = exp2({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Natural logarithm.",
			"name": "log",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = log({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Natural logarithm.",
			"name": "log",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = log({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Natural logarithm.",
			"name": "log",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = log({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Natural logarithm.",
			"name": "log",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = log({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Base-2 logarithm.",
			"name": "log2",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = log2({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Base-2 logarithm.",
			"name": "log2",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = log2({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Base-2 logarithm.",
			"name": "log2",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = log2({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Base-2 logarithm.",
			"name": "log2",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = log2({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Square root.",
			"name": "sqrt",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = sqrt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Square root.",
			"name": "sqrt",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = sqrt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Square root.",
			"name": "sqrt",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = sqrt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Square root.",
			"name": "sqrt",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = sqrt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Inverse square root.",
			"name": "inversesqrt",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = inversesqrt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Inverse square root.",
			"name": "inversesqrt",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = inversesqrt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Inverse square root.",
			"name": "inversesqrt",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = inversesqrt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Inverse square root.",
			"name": "inversesqrt",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = inversesqrt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Absolute value (returns positive value if negative).",
			"name": "abs",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = abs({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Absolute value (returns positive value if negative).",
			"name": "abs",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = abs({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Absolute value (returns positive value if negative).",
			"name": "abs",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = abs({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Absolute value (returns positive value if negative).",
			"name": "abs",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = abs({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Absolute value (returns positive value if negative).",
			"name": "abs",
			"inputs": [
				{
					"type": "int",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "int",
					"name": "result"
				}
			],
			"code": "{o0} = abs({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Absolute value (returns positive value if negative).",
			"name": "abs",
			"inputs": [
				{
					"type": "ivec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "ivec2",
					"name": "result"
				}
			],
			"code": "{o0} = abs({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Absolute value (returns positive value if negative).",
			"name": "abs",
			"inputs": [
				{
					"type": "ivec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "ivec3",
					"name": "result"
				}
			],
			"code": "{o0} = abs({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Absolute value (returns positive value if negative).",
			"name": "abs",
			"inputs": [
				{
					"type": "ivec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "ivec4",
					"name": "result"
				}
			],
			"code": "{o0} = abs({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sign (returns 1.0 if positive, -1.0 if negative,\n0.0 if zero).",
			"name": "sign",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = sign({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sign (returns 1.0 if positive, -1.0 if negative,\n0.0 if zero).",
			"name": "sign",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = sign({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sign (returns 1.0 if positive, -1.0 if negative,\n0.0 if zero).",
			"name": "sign",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = sign({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sign (returns 1.0 if positive, -1.0 if negative,\n0.0 if zero).",
			"name": "sign",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = sign({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sign (returns 1.0 if positive, -1.0 if negative,\n0.0 if zero).",
			"name": "sign",
			"inputs": [
				{
					"type": "int",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "int",
					"name": "result"
				}
			],
			"code": "{o0} = sign({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sign (returns 1.0 if positive, -1.0 if negative,\n0.0 if zero).",
			"name": "sign",
			"inputs": [
				{
					"type": "ivec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "ivec2",
					"name": "result"
				}
			],
			"code": "{o0} = sign({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sign (returns 1.0 if positive, -1.0 if negative,\n0.0 if zero).",
			"name": "sign",
			"inputs": [
				{
					"type": "ivec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "ivec3",
					"name": "result"
				}
			],
			"code": "{o0} = sign({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sign (returns 1.0 if positive, -1.0 if negative,\n0.0 if zero).",
			"name": "sign",
			"inputs": [
				{
					"type": "ivec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "ivec4",
					"name": "result"
				}
			],
			"code": "{o0} = sign({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Round to the integer below.",
			"name": "floor",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = floor({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Round to the integer below.",
			"name": "floor",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = floor({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Round to the integer below.",
			"name": "floor",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = floor({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Round to the integer below.",
			"name": "floor",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = floor({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Round to the nearest integer.",
			"name": "round",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = round({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Round to the nearest integer.",
			"name": "round",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = round({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Round to the nearest integer.",
			"name": "round",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = round({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Round to the nearest integer.",
			"name": "round",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = round({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Round to the nearest even integer.",
			"name": "roundEven",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = roundEven({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Round to the nearest even integer.",
			"name": "roundEven",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = roundEven({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Round to the nearest even integer.",
			"name": "roundEven",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = roundEven({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Round to the nearest even integer.",
			"name": "roundEven",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = roundEven({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Truncation.",
			"name": "trunc",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = trunc({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Truncation.",
			"name": "trunc",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = trunc({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Truncation.",
			"name": "trunc",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = trunc({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Truncation.",
			"name": "trunc",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = trunc({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Round to the integer above.",
			"name": "ceil",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = ceil({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Round to the integer above.",
			"name": "ceil",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = ceil({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Round to the integer above.",
			"name": "ceil",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = ceil({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Round to the integer above.",
			"name": "ceil",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = ceil({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Fractional (returns x - floor(x)).",
			"name": "fract",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = fract({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Fractional (returns x - floor(x)).",
			"name": "fract",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = fract({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Fractional (returns x - floor(x)).",
			"name": "fract",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = fract({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Fractional (returns x - floor(x)).",
			"name": "fract",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = fract({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Modulo (division remainder).",
			"name": "mod",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = mod({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Modulo (division remainder).",
			"name": "mod",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				},
				{
					"type": "vec2",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = mod({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Modulo (division remainder).",
			"name": "mod",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = mod({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Modulo (division remainder).",
			"name": "mod",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				},
				{
					"type": "vec4",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = mod({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Modulo (division remainder).",
			"name": "mod",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = mod({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Modulo (division remainder).",
			"name": "mod",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = mod({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Modulo (division remainder).",
			"name": "mod",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = mod({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Modulo (division remainder).",
			"name": "mod",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = mod({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Fractional of x, with i as integer part.",
			"name": "modf",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				},
				{
					"type": "float",
					"name": "i"
				}
			],
			"code": "{o0} = modf({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Fractional of x, with i as integer part.",
			"name": "modf",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				},
				{
					"type": "vec2",
					"name": "i"
				}
			],
			"code": "{o0} = modf({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Fractional of x, with i as integer part.",
			"name": "modf",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				},
				{
					"type": "vec3",
					"name": "i"
				}
			],
			"code": "{o0} = modf({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Fractional of x, with i as integer part.",
			"name": "modf",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				},
				{
					"type": "vec4",
					"name": "i"
				}
			],
			"code": "{o0} = modf({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Lowest value between a and b.",
			"name": "",
			"inputs": [
				{
					"type": "min",
					"name": "vec_type"
				},
				{
					"type": "a",
					"name": "vec_type"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = ({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Lowest value between a and b.",
			"name": "",
			"inputs": [
				{
					"type": "min",
					"name": "vec_type"
				},
				{
					"type": "a",
					"name": "vec_type"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = ({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Lowest value between a and b.",
			"name": "",
			"inputs": [
				{
					"type": "min",
					"name": "vec_type"
				},
				{
					"type": "a",
					"name": "vec_type"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = ({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Lowest value between a and b.",
			"name": "",
			"inputs": [
				{
					"type": "min",
					"name": "vec_type"
				},
				{
					"type": "a",
					"name": "vec_type"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = ({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Highest value between a and b.",
			"name": "",
			"inputs": [
				{
					"type": "max",
					"name": "vec_type"
				},
				{
					"type": "a",
					"name": "vec_type"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = ({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Highest value between a and b.",
			"name": "",
			"inputs": [
				{
					"type": "max",
					"name": "vec_type"
				},
				{
					"type": "a",
					"name": "vec_type"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = ({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Highest value between a and b.",
			"name": "",
			"inputs": [
				{
					"type": "max",
					"name": "vec_type"
				},
				{
					"type": "a",
					"name": "vec_type"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = ({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Highest value between a and b.",
			"name": "",
			"inputs": [
				{
					"type": "max",
					"name": "vec_type"
				},
				{
					"type": "a",
					"name": "vec_type"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = ({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Clamp x between min and max (inclusive).",
			"name": "clamp",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "min"
				},
				{
					"type": "float",
					"name": "max"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = clamp({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Clamp x between min and max (inclusive).",
			"name": "clamp",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				},
				{
					"type": "vec2",
					"name": "min"
				},
				{
					"type": "vec2",
					"name": "max"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = clamp({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Clamp x between min and max (inclusive).",
			"name": "clamp",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "min"
				},
				{
					"type": "vec3",
					"name": "max"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = clamp({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Clamp x between min and max (inclusive).",
			"name": "clamp",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				},
				{
					"type": "vec4",
					"name": "min"
				},
				{
					"type": "vec4",
					"name": "max"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = clamp({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Linear interpolate between a and b by c.",
			"name": "mix",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "float",
					"name": "b"
				},
				{
					"type": "float",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = mix({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Linear interpolate between a and b by c.",
			"name": "mix",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "float",
					"name": "b"
				},
				{
					"type": "float",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = mix({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Linear interpolate between a and b by c.",
			"name": "mix",
			"inputs": [
				{
					"type": "vec2",
					"name": "a"
				},
				{
					"type": "vec2",
					"name": "b"
				},
				{
					"type": "float",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = mix({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Linear interpolate between a and b by c.",
			"name": "mix",
			"inputs": [
				{
					"type": "vec3",
					"name": "a"
				},
				{
					"type": "vec3",
					"name": "b"
				},
				{
					"type": "float",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = mix({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Linear interpolate between a and b by c.",
			"name": "mix",
			"inputs": [
				{
					"type": "vec4",
					"name": "a"
				},
				{
					"type": "vec4",
					"name": "b"
				},
				{
					"type": "float",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = mix({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Linear interpolate between a and b by c.",
			"name": "mix",
			"inputs": [
				{
					"type": "vec2",
					"name": "a"
				},
				{
					"type": "vec2",
					"name": "b"
				},
				{
					"type": "bvec_type",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = mix({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Linear interpolate between a and b by c.",
			"name": "mix",
			"inputs": [
				{
					"type": "vec4",
					"name": "a"
				},
				{
					"type": "vec4",
					"name": "b"
				},
				{
					"type": "bvec_type",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = mix({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Linear interpolate between a and b by c.",
			"name": "mix",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "float",
					"name": "b"
				},
				{
					"type": "bool",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = mix({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Linear interpolate between a and b by c.",
			"name": "mix",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "float",
					"name": "b"
				},
				{
					"type": "bvec2",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = mix({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Linear interpolate between a and b by c.",
			"name": "mix",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "float",
					"name": "b"
				},
				{
					"type": "bvec3",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = mix({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Linear interpolate between a and b by c.",
			"name": "mix",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "float",
					"name": "b"
				},
				{
					"type": "bvec4",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = mix({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Linear interpolate between a and b by c.",
			"name": "mix",
			"inputs": [
				{
					"type": "vec3",
					"name": "a"
				},
				{
					"type": "vec3",
					"name": "b"
				},
				{
					"type": "bool",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = mix({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Linear interpolate between a and b by c.",
			"name": "mix",
			"inputs": [
				{
					"type": "vec3",
					"name": "a"
				},
				{
					"type": "vec3",
					"name": "b"
				},
				{
					"type": "bvec2",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = mix({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Linear interpolate between a and b by c.",
			"name": "mix",
			"inputs": [
				{
					"type": "vec3",
					"name": "a"
				},
				{
					"type": "vec3",
					"name": "b"
				},
				{
					"type": "bvec3",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = mix({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Linear interpolate between a and b by c.",
			"name": "mix",
			"inputs": [
				{
					"type": "vec3",
					"name": "a"
				},
				{
					"type": "vec3",
					"name": "b"
				},
				{
					"type": "bvec4",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = mix({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a fused multiply-add operation: (a * b + c)\n(faster than doing it manually).",
			"name": "fma",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "float",
					"name": "b"
				},
				{
					"type": "float",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = fma({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a fused multiply-add operation: (a * b + c)\n(faster than doing it manually).",
			"name": "fma",
			"inputs": [
				{
					"type": "vec2",
					"name": "a"
				},
				{
					"type": "vec2",
					"name": "b"
				},
				{
					"type": "vec2",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = fma({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a fused multiply-add operation: (a * b + c)\n(faster than doing it manually).",
			"name": "fma",
			"inputs": [
				{
					"type": "vec3",
					"name": "a"
				},
				{
					"type": "vec3",
					"name": "b"
				},
				{
					"type": "vec3",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = fma({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a fused multiply-add operation: (a * b + c)\n(faster than doing it manually).",
			"name": "fma",
			"inputs": [
				{
					"type": "vec4",
					"name": "a"
				},
				{
					"type": "vec4",
					"name": "b"
				},
				{
					"type": "vec4",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = fma({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "b[i] < a[i] ? 0.0 : 1.0.",
			"name": "step",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "float",
					"name": "b"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = step({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "b[i] < a[i] ? 0.0 : 1.0.",
			"name": "step",
			"inputs": [
				{
					"type": "vec2",
					"name": "a"
				},
				{
					"type": "vec2",
					"name": "b"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = step({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "b[i] < a[i] ? 0.0 : 1.0.",
			"name": "step",
			"inputs": [
				{
					"type": "vec3",
					"name": "a"
				},
				{
					"type": "vec3",
					"name": "b"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = step({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "b[i] < a[i] ? 0.0 : 1.0.",
			"name": "step",
			"inputs": [
				{
					"type": "vec4",
					"name": "a"
				},
				{
					"type": "vec4",
					"name": "b"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = step({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "b[i] < a ? 0.0 : 1.0.",
			"name": "step",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "float",
					"name": "b"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = step({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "b[i] < a ? 0.0 : 1.0.",
			"name": "step",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "vec2",
					"name": "b"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = step({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "b[i] < a ? 0.0 : 1.0.",
			"name": "step",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "vec3",
					"name": "b"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = step({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "b[i] < a ? 0.0 : 1.0.",
			"name": "step",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "vec4",
					"name": "b"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = step({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Hermite interpolate between a and b by c.",
			"name": "smoothstep",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "float",
					"name": "b"
				},
				{
					"type": "float",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = smoothstep({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Hermite interpolate between a and b by c.",
			"name": "smoothstep",
			"inputs": [
				{
					"type": "vec2",
					"name": "a"
				},
				{
					"type": "vec2",
					"name": "b"
				},
				{
					"type": "vec2",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = smoothstep({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Hermite interpolate between a and b by c.",
			"name": "smoothstep",
			"inputs": [
				{
					"type": "vec3",
					"name": "a"
				},
				{
					"type": "vec3",
					"name": "b"
				},
				{
					"type": "vec3",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = smoothstep({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Hermite interpolate between a and b by c.",
			"name": "smoothstep",
			"inputs": [
				{
					"type": "vec4",
					"name": "a"
				},
				{
					"type": "vec4",
					"name": "b"
				},
				{
					"type": "vec4",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = smoothstep({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Hermite interpolate between a and b by c.",
			"name": "smoothstep",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "float",
					"name": "b"
				},
				{
					"type": "float",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = smoothstep({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Hermite interpolate between a and b by c.",
			"name": "smoothstep",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "float",
					"name": "b"
				},
				{
					"type": "vec2",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = smoothstep({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Hermite interpolate between a and b by c.",
			"name": "smoothstep",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "float",
					"name": "b"
				},
				{
					"type": "vec3",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = smoothstep({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Hermite interpolate between a and b by c.",
			"name": "smoothstep",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "float",
					"name": "b"
				},
				{
					"type": "vec4",
					"name": "c"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = smoothstep({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is NaN.",
			"name": "isnan",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = isnan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is NaN.",
			"name": "isnan",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = isnan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is NaN.",
			"name": "isnan",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = isnan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is NaN.",
			"name": "isnan",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec2",
					"name": "result"
				}
			],
			"code": "{o0} = isnan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is NaN.",
			"name": "isnan",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec3",
					"name": "result"
				}
			],
			"code": "{o0} = isnan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is NaN.",
			"name": "isnan",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec4",
					"name": "result"
				}
			],
			"code": "{o0} = isnan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is NaN.",
			"name": "isnan",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = isnan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is NaN.",
			"name": "isnan",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec2",
					"name": "result"
				}
			],
			"code": "{o0} = isnan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is NaN.",
			"name": "isnan",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec3",
					"name": "result"
				}
			],
			"code": "{o0} = isnan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is NaN.",
			"name": "isnan",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec4",
					"name": "result"
				}
			],
			"code": "{o0} = isnan({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is INF.",
			"name": "isinf",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = isinf({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is INF.",
			"name": "isinf",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = isinf({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is INF.",
			"name": "isinf",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = isinf({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is INF.",
			"name": "isinf",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec2",
					"name": "result"
				}
			],
			"code": "{o0} = isinf({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is INF.",
			"name": "isinf",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec3",
					"name": "result"
				}
			],
			"code": "{o0} = isinf({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is INF.",
			"name": "isinf",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec4",
					"name": "result"
				}
			],
			"code": "{o0} = isinf({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is INF.",
			"name": "isinf",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = isinf({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is INF.",
			"name": "isinf",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec2",
					"name": "result"
				}
			],
			"code": "{o0} = isinf({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is INF.",
			"name": "isinf",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec3",
					"name": "result"
				}
			],
			"code": "{o0} = isinf({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Returns true if scalar or vector component is INF.",
			"name": "isinf",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec4",
					"name": "result"
				}
			],
			"code": "{o0} = isinf({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->Int bit copying, no conversion.",
			"name": "floatBitsToInt",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "ivec_type",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToInt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->Int bit copying, no conversion.",
			"name": "floatBitsToInt",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "ivec_type",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToInt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->Int bit copying, no conversion.",
			"name": "floatBitsToInt",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "int",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToInt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->Int bit copying, no conversion.",
			"name": "floatBitsToInt",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "ivec2",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToInt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->Int bit copying, no conversion.",
			"name": "floatBitsToInt",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "ivec3",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToInt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->Int bit copying, no conversion.",
			"name": "floatBitsToInt",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "ivec4",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToInt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->Int bit copying, no conversion.",
			"name": "floatBitsToInt",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "int",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToInt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->Int bit copying, no conversion.",
			"name": "floatBitsToInt",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "ivec2",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToInt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->Int bit copying, no conversion.",
			"name": "floatBitsToInt",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "ivec3",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToInt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->Int bit copying, no conversion.",
			"name": "floatBitsToInt",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "ivec4",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToInt({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->UInt bit copying, no conversion.",
			"name": "floatBitsToUint",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "uvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToUint({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->UInt bit copying, no conversion.",
			"name": "floatBitsToUint",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "uvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToUint({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->UInt bit copying, no conversion.",
			"name": "floatBitsToUint",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "uint",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToUint({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->UInt bit copying, no conversion.",
			"name": "floatBitsToUint",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "uvec2",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToUint({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->UInt bit copying, no conversion.",
			"name": "floatBitsToUint",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "uvec3",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToUint({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->UInt bit copying, no conversion.",
			"name": "floatBitsToUint",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "uvec4",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToUint({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->UInt bit copying, no conversion.",
			"name": "floatBitsToUint",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "uint",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToUint({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->UInt bit copying, no conversion.",
			"name": "floatBitsToUint",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "uvec2",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToUint({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->UInt bit copying, no conversion.",
			"name": "floatBitsToUint",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "uvec3",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToUint({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Float->UInt bit copying, no conversion.",
			"name": "floatBitsToUint",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "uvec4",
					"name": "result"
				}
			],
			"code": "{o0} = floatBitsToUint({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Int->Float bit copying, no conversion.",
			"name": "intBitsToFloat",
			"inputs": [
				{
					"type": "ivec_type",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = intBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Int->Float bit copying, no conversion.",
			"name": "intBitsToFloat",
			"inputs": [
				{
					"type": "ivec_type",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = intBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Int->Float bit copying, no conversion.",
			"name": "intBitsToFloat",
			"inputs": [
				{
					"type": "int",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = intBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Int->Float bit copying, no conversion.",
			"name": "intBitsToFloat",
			"inputs": [
				{
					"type": "ivec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = intBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Int->Float bit copying, no conversion.",
			"name": "intBitsToFloat",
			"inputs": [
				{
					"type": "ivec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = intBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Int->Float bit copying, no conversion.",
			"name": "intBitsToFloat",
			"inputs": [
				{
					"type": "ivec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = intBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Int->Float bit copying, no conversion.",
			"name": "intBitsToFloat",
			"inputs": [
				{
					"type": "int",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = intBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Int->Float bit copying, no conversion.",
			"name": "intBitsToFloat",
			"inputs": [
				{
					"type": "ivec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = intBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Int->Float bit copying, no conversion.",
			"name": "intBitsToFloat",
			"inputs": [
				{
					"type": "ivec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = intBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Int->Float bit copying, no conversion.",
			"name": "intBitsToFloat",
			"inputs": [
				{
					"type": "ivec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = intBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "UInt->Float bit copying, no conversion.",
			"name": "uintBitsToFloat",
			"inputs": [
				{
					"type": "uvec_type",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = uintBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "UInt->Float bit copying, no conversion.",
			"name": "uintBitsToFloat",
			"inputs": [
				{
					"type": "uvec_type",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = uintBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "UInt->Float bit copying, no conversion.",
			"name": "uintBitsToFloat",
			"inputs": [
				{
					"type": "uint",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = uintBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "UInt->Float bit copying, no conversion.",
			"name": "uintBitsToFloat",
			"inputs": [
				{
					"type": "uvec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = uintBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "UInt->Float bit copying, no conversion.",
			"name": "uintBitsToFloat",
			"inputs": [
				{
					"type": "uvec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = uintBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "UInt->Float bit copying, no conversion.",
			"name": "uintBitsToFloat",
			"inputs": [
				{
					"type": "uvec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = uintBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "UInt->Float bit copying, no conversion.",
			"name": "uintBitsToFloat",
			"inputs": [
				{
					"type": "uint",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = uintBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "UInt->Float bit copying, no conversion.",
			"name": "uintBitsToFloat",
			"inputs": [
				{
					"type": "uvec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = uintBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "UInt->Float bit copying, no conversion.",
			"name": "uintBitsToFloat",
			"inputs": [
				{
					"type": "uvec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = uintBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "UInt->Float bit copying, no conversion.",
			"name": "uintBitsToFloat",
			"inputs": [
				{
					"type": "uvec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = uintBitsToFloat({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Vector length.",
			"name": "length",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = length({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Vector length.",
			"name": "length",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = length({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Vector length.",
			"name": "length",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = length({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Vector length.",
			"name": "length",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = length({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Distance between vectors i.e length(a - b).",
			"name": "distance",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "float",
					"name": "b"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = distance({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Distance between vectors i.e length(a - b).",
			"name": "distance",
			"inputs": [
				{
					"type": "vec2",
					"name": "a"
				},
				{
					"type": "vec2",
					"name": "b"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = distance({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Distance between vectors i.e length(a - b).",
			"name": "distance",
			"inputs": [
				{
					"type": "vec3",
					"name": "a"
				},
				{
					"type": "vec3",
					"name": "b"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = distance({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Distance between vectors i.e length(a - b).",
			"name": "distance",
			"inputs": [
				{
					"type": "vec4",
					"name": "a"
				},
				{
					"type": "vec4",
					"name": "b"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = distance({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Dot product.",
			"name": "dot",
			"inputs": [
				{
					"type": "float",
					"name": "a"
				},
				{
					"type": "float",
					"name": "b"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = dot({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Dot product.",
			"name": "dot",
			"inputs": [
				{
					"type": "vec2",
					"name": "a"
				},
				{
					"type": "vec2",
					"name": "b"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = dot({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Dot product.",
			"name": "dot",
			"inputs": [
				{
					"type": "vec3",
					"name": "a"
				},
				{
					"type": "vec3",
					"name": "b"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = dot({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Dot product.",
			"name": "dot",
			"inputs": [
				{
					"type": "vec4",
					"name": "a"
				},
				{
					"type": "vec4",
					"name": "b"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = dot({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Cross product.",
			"name": "cross",
			"inputs": [
				{
					"type": "vec3",
					"name": "a"
				},
				{
					"type": "vec3",
					"name": "b"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = cross({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Normalize to unit length.",
			"name": "normalize",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = normalize({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Normalize to unit length.",
			"name": "normalize",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = normalize({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Normalize to unit length.",
			"name": "normalize",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = normalize({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Normalize to unit length.",
			"name": "normalize",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = normalize({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Reflect.",
			"name": "reflect",
			"inputs": [
				{
					"type": "vec3",
					"name": "I"
				},
				{
					"type": "vec3",
					"name": "N"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = reflect({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Refract.",
			"name": "refract",
			"inputs": [
				{
					"type": "vec3",
					"name": "I"
				},
				{
					"type": "vec3",
					"name": "N"
				},
				{
					"type": "float",
					"name": "eta"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = refract({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "If dot(Nref, I) < 0, return N, otherwise -N.",
			"name": "faceforward",
			"inputs": [
				{
					"type": "float",
					"name": "N"
				},
				{
					"type": "float",
					"name": "I"
				},
				{
					"type": "float",
					"name": "Nref"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = faceforward({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "If dot(Nref, I) < 0, return N, otherwise -N.",
			"name": "faceforward",
			"inputs": [
				{
					"type": "vec2",
					"name": "N"
				},
				{
					"type": "vec2",
					"name": "I"
				},
				{
					"type": "vec2",
					"name": "Nref"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = faceforward({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "If dot(Nref, I) < 0, return N, otherwise -N.",
			"name": "faceforward",
			"inputs": [
				{
					"type": "vec3",
					"name": "N"
				},
				{
					"type": "vec3",
					"name": "I"
				},
				{
					"type": "vec3",
					"name": "Nref"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = faceforward({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "If dot(Nref, I) < 0, return N, otherwise -N.",
			"name": "faceforward",
			"inputs": [
				{
					"type": "vec4",
					"name": "N"
				},
				{
					"type": "vec4",
					"name": "I"
				},
				{
					"type": "vec4",
					"name": "Nref"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = faceforward({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Matrix component multiplication.",
			"name": "matrixCompMult",
			"inputs": [
				{
					"type": "mat_type",
					"name": "x"
				},
				{
					"type": "mat_type",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "mat_type",
					"name": "result"
				}
			],
			"code": "{o0} = matrixCompMult({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Matrix outer product.",
			"name": "outerProduct",
			"inputs": [
				{
					"type": "float",
					"name": "column"
				},
				{
					"type": "float",
					"name": "row"
				}
			],
			"outputs": [
				{
					"type": "mat_type",
					"name": "result"
				}
			],
			"code": "{o0} = outerProduct({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Matrix outer product.",
			"name": "outerProduct",
			"inputs": [
				{
					"type": "vec2",
					"name": "column"
				},
				{
					"type": "vec2",
					"name": "row"
				}
			],
			"outputs": [
				{
					"type": "mat_type",
					"name": "result"
				}
			],
			"code": "{o0} = outerProduct({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Matrix outer product.",
			"name": "outerProduct",
			"inputs": [
				{
					"type": "vec3",
					"name": "column"
				},
				{
					"type": "vec3",
					"name": "row"
				}
			],
			"outputs": [
				{
					"type": "mat_type",
					"name": "result"
				}
			],
			"code": "{o0} = outerProduct({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Matrix outer product.",
			"name": "outerProduct",
			"inputs": [
				{
					"type": "vec4",
					"name": "column"
				},
				{
					"type": "vec4",
					"name": "row"
				}
			],
			"outputs": [
				{
					"type": "mat_type",
					"name": "result"
				}
			],
			"code": "{o0} = outerProduct({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Transpose matrix.",
			"name": "transpose",
			"inputs": [
				{
					"type": "mat_type",
					"name": "m"
				}
			],
			"outputs": [
				{
					"type": "mat_type",
					"name": "result"
				}
			],
			"code": "{o0} = transpose({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Matrix determinant.",
			"name": "determinant",
			"inputs": [
				{
					"type": "mat_type",
					"name": "m"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = determinant({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Inverse matrix.",
			"name": "inverse",
			"inputs": [
				{
					"type": "mat_type",
					"name": "m"
				}
			],
			"outputs": [
				{
					"type": "mat_type",
					"name": "result"
				}
			],
			"code": "{o0} = inverse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on < int/uint/float vectors.",
			"name": "lessThan",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				},
				{
					"type": "vec2",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = lessThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on < int/uint/float vectors.",
			"name": "lessThan",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				},
				{
					"type": "vec4",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = lessThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on < int/uint/float vectors.",
			"name": "lessThan",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = lessThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on < int/uint/float vectors.",
			"name": "lessThan",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec2",
					"name": "result"
				}
			],
			"code": "{o0} = lessThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on < int/uint/float vectors.",
			"name": "lessThan",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec3",
					"name": "result"
				}
			],
			"code": "{o0} = lessThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on < int/uint/float vectors.",
			"name": "lessThan",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec4",
					"name": "result"
				}
			],
			"code": "{o0} = lessThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on < int/uint/float vectors.",
			"name": "lessThan",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = lessThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on < int/uint/float vectors.",
			"name": "lessThan",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec2",
					"name": "result"
				}
			],
			"code": "{o0} = lessThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on < int/uint/float vectors.",
			"name": "lessThan",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec3",
					"name": "result"
				}
			],
			"code": "{o0} = lessThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on < int/uint/float vectors.",
			"name": "lessThan",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec4",
					"name": "result"
				}
			],
			"code": "{o0} = lessThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on > int/uint/float vectors.",
			"name": "greaterThan",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				},
				{
					"type": "vec2",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on > int/uint/float vectors.",
			"name": "greaterThan",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				},
				{
					"type": "vec4",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on > int/uint/float vectors.",
			"name": "greaterThan",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on > int/uint/float vectors.",
			"name": "greaterThan",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec2",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on > int/uint/float vectors.",
			"name": "greaterThan",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec3",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on > int/uint/float vectors.",
			"name": "greaterThan",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec4",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on > int/uint/float vectors.",
			"name": "greaterThan",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on > int/uint/float vectors.",
			"name": "greaterThan",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec2",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on > int/uint/float vectors.",
			"name": "greaterThan",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec3",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on > int/uint/float vectors.",
			"name": "greaterThan",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec4",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThan({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on <= int/uint/float vectors.",
			"name": "lessThanEqual",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				},
				{
					"type": "vec2",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = lessThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on <= int/uint/float vectors.",
			"name": "lessThanEqual",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				},
				{
					"type": "vec4",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = lessThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on <= int/uint/float vectors.",
			"name": "lessThanEqual",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = lessThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on <= int/uint/float vectors.",
			"name": "lessThanEqual",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec2",
					"name": "result"
				}
			],
			"code": "{o0} = lessThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on <= int/uint/float vectors.",
			"name": "lessThanEqual",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec3",
					"name": "result"
				}
			],
			"code": "{o0} = lessThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on <= int/uint/float vectors.",
			"name": "lessThanEqual",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec4",
					"name": "result"
				}
			],
			"code": "{o0} = lessThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on <= int/uint/float vectors.",
			"name": "lessThanEqual",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = lessThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on <= int/uint/float vectors.",
			"name": "lessThanEqual",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec2",
					"name": "result"
				}
			],
			"code": "{o0} = lessThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on <= int/uint/float vectors.",
			"name": "lessThanEqual",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec3",
					"name": "result"
				}
			],
			"code": "{o0} = lessThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on <= int/uint/float vectors.",
			"name": "lessThanEqual",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec4",
					"name": "result"
				}
			],
			"code": "{o0} = lessThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on >= int/uint/float vectors.",
			"name": "greaterThanEqual",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				},
				{
					"type": "vec2",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on >= int/uint/float vectors.",
			"name": "greaterThanEqual",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				},
				{
					"type": "vec4",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on >= int/uint/float vectors.",
			"name": "greaterThanEqual",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on >= int/uint/float vectors.",
			"name": "greaterThanEqual",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec2",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on >= int/uint/float vectors.",
			"name": "greaterThanEqual",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec3",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on >= int/uint/float vectors.",
			"name": "greaterThanEqual",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec4",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on >= int/uint/float vectors.",
			"name": "greaterThanEqual",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on >= int/uint/float vectors.",
			"name": "greaterThanEqual",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec2",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on >= int/uint/float vectors.",
			"name": "greaterThanEqual",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec3",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on >= int/uint/float vectors.",
			"name": "greaterThanEqual",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec4",
					"name": "result"
				}
			],
			"code": "{o0} = greaterThanEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on == int/uint/float vectors.",
			"name": "equal",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				},
				{
					"type": "vec2",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = equal({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on == int/uint/float vectors.",
			"name": "equal",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				},
				{
					"type": "vec4",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = equal({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on == int/uint/float vectors.",
			"name": "equal",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = equal({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on == int/uint/float vectors.",
			"name": "equal",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec2",
					"name": "result"
				}
			],
			"code": "{o0} = equal({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on == int/uint/float vectors.",
			"name": "equal",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec3",
					"name": "result"
				}
			],
			"code": "{o0} = equal({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on == int/uint/float vectors.",
			"name": "equal",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec4",
					"name": "result"
				}
			],
			"code": "{o0} = equal({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on == int/uint/float vectors.",
			"name": "equal",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = equal({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on == int/uint/float vectors.",
			"name": "equal",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec2",
					"name": "result"
				}
			],
			"code": "{o0} = equal({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on == int/uint/float vectors.",
			"name": "equal",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec3",
					"name": "result"
				}
			],
			"code": "{o0} = equal({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on == int/uint/float vectors.",
			"name": "equal",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec4",
					"name": "result"
				}
			],
			"code": "{o0} = equal({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on != int/uint/float vectors.",
			"name": "notEqual",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				},
				{
					"type": "vec2",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = notEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on != int/uint/float vectors.",
			"name": "notEqual",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				},
				{
					"type": "vec4",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec_type",
					"name": "result"
				}
			],
			"code": "{o0} = notEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on != int/uint/float vectors.",
			"name": "notEqual",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = notEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on != int/uint/float vectors.",
			"name": "notEqual",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec2",
					"name": "result"
				}
			],
			"code": "{o0} = notEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on != int/uint/float vectors.",
			"name": "notEqual",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec3",
					"name": "result"
				}
			],
			"code": "{o0} = notEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on != int/uint/float vectors.",
			"name": "notEqual",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				},
				{
					"type": "float",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec4",
					"name": "result"
				}
			],
			"code": "{o0} = notEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on != int/uint/float vectors.",
			"name": "notEqual",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = notEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on != int/uint/float vectors.",
			"name": "notEqual",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec2",
					"name": "result"
				}
			],
			"code": "{o0} = notEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on != int/uint/float vectors.",
			"name": "notEqual",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec3",
					"name": "result"
				}
			],
			"code": "{o0} = notEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Bool vector comparison on != int/uint/float vectors.",
			"name": "notEqual",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				},
				{
					"type": "vec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "bvec4",
					"name": "result"
				}
			],
			"code": "{o0} = notEqual({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "true if any component is true, false otherwise.",
			"name": "any",
			"inputs": [
				{
					"type": "bool",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = any({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "true if any component is true, false otherwise.",
			"name": "any",
			"inputs": [
				{
					"type": "bvec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = any({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "true if any component is true, false otherwise.",
			"name": "any",
			"inputs": [
				{
					"type": "bvec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = any({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "true if any component is true, false otherwise.",
			"name": "any",
			"inputs": [
				{
					"type": "bvec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = any({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "true if all components are true, false otherwise.",
			"name": "all",
			"inputs": [
				{
					"type": "bool",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = all({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "true if all components are true, false otherwise.",
			"name": "all",
			"inputs": [
				{
					"type": "bvec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = all({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "true if all components are true, false otherwise.",
			"name": "all",
			"inputs": [
				{
					"type": "bvec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = all({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "true if all components are true, false otherwise.",
			"name": "all",
			"inputs": [
				{
					"type": "bvec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = all({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Invert boolean vector.",
			"name": "not",
			"inputs": [
				{
					"type": "bool",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bool",
					"name": "result"
				}
			],
			"code": "{o0} = not({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Invert boolean vector.",
			"name": "not",
			"inputs": [
				{
					"type": "bvec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec2",
					"name": "result"
				}
			],
			"code": "{o0} = not({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Invert boolean vector.",
			"name": "not",
			"inputs": [
				{
					"type": "bvec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec3",
					"name": "result"
				}
			],
			"code": "{o0} = not({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Invert boolean vector.",
			"name": "not",
			"inputs": [
				{
					"type": "bvec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "bvec4",
					"name": "result"
				}
			],
			"code": "{o0} = not({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Get the size of a texture.\nThe LOD defines which mipmap level is used. An LOD value of 0\nwill use the full resolution texture.\n",
			"name": "textureSize",
			"inputs": [
				{
					"type": "gsampler2D",
					"name": "s"
				},
				{
					"type": "int",
					"name": "lod"
				}
			],
			"outputs": [
				{
					"type": "ivec2",
					"name": "result"
				}
			],
			"code": "{o0} = textureSize({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Get the size of a texture.\nThe LOD defines which mipmap level is used. An LOD value of 0\nwill use the full resolution texture.\n",
			"name": "textureSize",
			"inputs": [
				{
					"type": "gsampler2DArray",
					"name": "s"
				},
				{
					"type": "int",
					"name": "lod"
				}
			],
			"outputs": [
				{
					"type": "ivec3",
					"name": "result"
				}
			],
			"code": "{o0} = textureSize({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Get the size of a texture.\nThe LOD defines which mipmap level is used. An LOD value of 0\nwill use the full resolution texture.\n",
			"name": "textureSize",
			"inputs": [
				{
					"type": "gsampler3D",
					"name": "s"
				},
				{
					"type": "int",
					"name": "lod"
				}
			],
			"outputs": [
				{
					"type": "ivec3",
					"name": "result"
				}
			],
			"code": "{o0} = textureSize({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Get the size of a texture.\nThe LOD defines which mipmap level is used. An LOD value of 0\nwill use the full resolution texture.\n",
			"name": "textureSize",
			"inputs": [
				{
					"type": "samplerCube",
					"name": "s"
				},
				{
					"type": "int",
					"name": "lod"
				}
			],
			"outputs": [
				{
					"type": "ivec2",
					"name": "result"
				}
			],
			"code": "{o0} = textureSize({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Get the size of a texture.\nThe LOD defines which mipmap level is used. An LOD value of 0\nwill use the full resolution texture.\n",
			"name": "textureSize",
			"inputs": [
				{
					"type": "samplerCubeArray",
					"name": "s"
				},
				{
					"type": "int",
					"name": "lod"
				}
			],
			"outputs": [
				{
					"type": "ivec2",
					"name": "result"
				}
			],
			"code": "{o0} = textureSize({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Compute the level-of-detail that would be used to sample from a\ntexture. The x component of the resulted value is the mipmap\narray that would be accessed. The y component is computed\nlevel-of-detail relative to the base level (regardless of the\nmipmap levels of the texture).",
			"name": "textureQueryLod",
			"inputs": [
				{
					"type": "gsampler2D",
					"name": "s"
				},
				{
					"type": "vec2",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = textureQueryLod({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Compute the level-of-detail that would be used to sample from a\ntexture. The x component of the resulted value is the mipmap\narray that would be accessed. The y component is computed\nlevel-of-detail relative to the base level (regardless of the\nmipmap levels of the texture).",
			"name": "textureQueryLod",
			"inputs": [
				{
					"type": "gsampler2DArray",
					"name": "s"
				},
				{
					"type": "vec2",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = textureQueryLod({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Compute the level-of-detail that would be used to sample from a\ntexture. The x component of the resulted value is the mipmap\narray that would be accessed. The y component is computed\nlevel-of-detail relative to the base level (regardless of the\nmipmap levels of the texture).",
			"name": "textureQueryLod",
			"inputs": [
				{
					"type": "gsampler3D",
					"name": "s"
				},
				{
					"type": "vec3",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = textureQueryLod({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Compute the level-of-detail that would be used to sample from a\ntexture. The x component of the resulted value is the mipmap\narray that would be accessed. The y component is computed\nlevel-of-detail relative to the base level (regardless of the\nmipmap levels of the texture).",
			"name": "textureQueryLod",
			"inputs": [
				{
					"type": "samplerCube",
					"name": "s"
				},
				{
					"type": "vec3",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = textureQueryLod({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Get the number of accessible mipmap levels of a texture.\nIf the texture is unassigned to a sampler, 1 is returned (Godot\nalways internally assigns a texture even to an empty sampler).\n",
			"name": "textureQueryLevels",
			"inputs": [
				{
					"type": "gsampler2D",
					"name": "s"
				}
			],
			"outputs": [
				{
					"type": "int",
					"name": "result"
				}
			],
			"code": "{o0} = textureQueryLevels({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Get the number of accessible mipmap levels of a texture.\nIf the texture is unassigned to a sampler, 1 is returned (Godot\nalways internally assigns a texture even to an empty sampler).\n",
			"name": "textureQueryLevels",
			"inputs": [
				{
					"type": "gsampler2DArray",
					"name": "s"
				}
			],
			"outputs": [
				{
					"type": "int",
					"name": "result"
				}
			],
			"code": "{o0} = textureQueryLevels({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Get the number of accessible mipmap levels of a texture.\nIf the texture is unassigned to a sampler, 1 is returned (Godot\nalways internally assigns a texture even to an empty sampler).\n",
			"name": "textureQueryLevels",
			"inputs": [
				{
					"type": "gsampler3D",
					"name": "s"
				}
			],
			"outputs": [
				{
					"type": "int",
					"name": "result"
				}
			],
			"code": "{o0} = textureQueryLevels({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Get the number of accessible mipmap levels of a texture.\nIf the texture is unassigned to a sampler, 1 is returned (Godot\nalways internally assigns a texture even to an empty sampler).\n",
			"name": "textureQueryLevels",
			"inputs": [
				{
					"type": "samplerCube",
					"name": "s"
				}
			],
			"outputs": [
				{
					"type": "int",
					"name": "result"
				}
			],
			"code": "{o0} = textureQueryLevels({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Perform a texture read.",
			"name": "texture",
			"inputs": [
				{
					"type": "gsampler2D",
					"name": "s"
				},
				{
					"type": "vec2",
					"name": "p"
				},
				{
					"type": "[",
					"name": "float"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = texture({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Perform a texture read.",
			"name": "texture",
			"inputs": [
				{
					"type": "gsampler2DArray",
					"name": "s"
				},
				{
					"type": "vec3",
					"name": "p"
				},
				{
					"type": "[",
					"name": "float"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = texture({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Perform a texture read.",
			"name": "texture",
			"inputs": [
				{
					"type": "gsampler3D",
					"name": "s"
				},
				{
					"type": "vec3",
					"name": "p"
				},
				{
					"type": "[",
					"name": "float"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = texture({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Perform a texture read.",
			"name": "texture",
			"inputs": [
				{
					"type": "samplerCube",
					"name": "s"
				},
				{
					"type": "vec3",
					"name": "p"
				},
				{
					"type": "[",
					"name": "float"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = texture({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Perform a texture read.",
			"name": "texture",
			"inputs": [
				{
					"type": "samplerCubeArray",
					"name": "s"
				},
				{
					"type": "vec4",
					"name": "p"
				},
				{
					"type": "[",
					"name": "float"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = texture({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Perform a texture read with projection.",
			"name": "textureProj",
			"inputs": [
				{
					"type": "gsampler2D",
					"name": "s"
				},
				{
					"type": "vec3",
					"name": "p"
				},
				{
					"type": "[",
					"name": "float"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = textureProj({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Perform a texture read with projection.",
			"name": "textureProj",
			"inputs": [
				{
					"type": "gsampler2D",
					"name": "s"
				},
				{
					"type": "vec4",
					"name": "p"
				},
				{
					"type": "[",
					"name": "float"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = textureProj({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Perform a texture read with projection.",
			"name": "textureProj",
			"inputs": [
				{
					"type": "gsampler3D",
					"name": "s"
				},
				{
					"type": "vec4",
					"name": "p"
				},
				{
					"type": "[",
					"name": "float"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = textureProj({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Perform a texture read at custom mipmap.\nThe LOD defines which mipmap level is used. An LOD value of 0.0\nwill use the full resolution texture. If the texture lacks mipmaps,\nall LOD values will act like 0.0.\n",
			"name": "textureLod",
			"inputs": [
				{
					"type": "gsampler2D",
					"name": "s"
				},
				{
					"type": "vec2",
					"name": "p"
				},
				{
					"type": "float",
					"name": "lod"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = textureLod({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Perform a texture read at custom mipmap.\nThe LOD defines which mipmap level is used. An LOD value of 0.0\nwill use the full resolution texture. If the texture lacks mipmaps,\nall LOD values will act like 0.0.\n",
			"name": "textureLod",
			"inputs": [
				{
					"type": "gsampler2DArray",
					"name": "s"
				},
				{
					"type": "vec3",
					"name": "p"
				},
				{
					"type": "float",
					"name": "lod"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = textureLod({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Perform a texture read at custom mipmap.\nThe LOD defines which mipmap level is used. An LOD value of 0.0\nwill use the full resolution texture. If the texture lacks mipmaps,\nall LOD values will act like 0.0.\n",
			"name": "textureLod",
			"inputs": [
				{
					"type": "gsampler3D",
					"name": "s"
				},
				{
					"type": "vec3",
					"name": "p"
				},
				{
					"type": "float",
					"name": "lod"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = textureLod({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Perform a texture read at custom mipmap.\nThe LOD defines which mipmap level is used. An LOD value of 0.0\nwill use the full resolution texture. If the texture lacks mipmaps,\nall LOD values will act like 0.0.\n",
			"name": "textureLod",
			"inputs": [
				{
					"type": "samplerCube",
					"name": "s"
				},
				{
					"type": "vec3",
					"name": "p"
				},
				{
					"type": "float",
					"name": "lod"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = textureLod({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Perform a texture read at custom mipmap.\nThe LOD defines which mipmap level is used. An LOD value of 0.0\nwill use the full resolution texture. If the texture lacks mipmaps,\nall LOD values will act like 0.0.\n",
			"name": "textureLod",
			"inputs": [
				{
					"type": "samplerCubeArray",
					"name": "s"
				},
				{
					"type": "vec4",
					"name": "p"
				},
				{
					"type": "float",
					"name": "lod"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = textureLod({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a texture read with projection/LOD.\nThe LOD defines which mipmap level is used. An LOD value of 0.0\nwill use the full resolution texture. If the texture lacks mipmaps,\nall LOD values will act like 0.0.\n",
			"name": "textureProjLod",
			"inputs": [
				{
					"type": "gsampler2D",
					"name": "s"
				},
				{
					"type": "vec3",
					"name": "p"
				},
				{
					"type": "float",
					"name": "lod"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = textureProjLod({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a texture read with projection/LOD.\nThe LOD defines which mipmap level is used. An LOD value of 0.0\nwill use the full resolution texture. If the texture lacks mipmaps,\nall LOD values will act like 0.0.\n",
			"name": "textureProjLod",
			"inputs": [
				{
					"type": "gsampler2D",
					"name": "s"
				},
				{
					"type": "vec4",
					"name": "p"
				},
				{
					"type": "float",
					"name": "lod"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = textureProjLod({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a texture read with projection/LOD.\nThe LOD defines which mipmap level is used. An LOD value of 0.0\nwill use the full resolution texture. If the texture lacks mipmaps,\nall LOD values will act like 0.0.\n",
			"name": "textureProjLod",
			"inputs": [
				{
					"type": "gsampler3D",
					"name": "s"
				},
				{
					"type": "vec4",
					"name": "p"
				},
				{
					"type": "float",
					"name": "lod"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = textureProjLod({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a texture read with explicit gradients.",
			"name": "textureGrad",
			"inputs": [
				{
					"type": "gsampler2D",
					"name": "s"
				},
				{
					"type": "vec2",
					"name": "p"
				},
				{
					"type": "vec2",
					"name": "dPdx"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = textureGrad({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a texture read with explicit gradients.",
			"name": "dPdy",
			"inputs": [],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = dPdy);"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a texture read with explicit gradients.",
			"name": "textureGrad",
			"inputs": [
				{
					"type": "gsampler2DArray",
					"name": "s"
				},
				{
					"type": "vec3",
					"name": "p"
				},
				{
					"type": "vec2",
					"name": "dPdx"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = textureGrad({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a texture read with explicit gradients.",
			"name": "dPdy",
			"inputs": [],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = dPdy);"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a texture read with explicit gradients.",
			"name": "textureGrad",
			"inputs": [
				{
					"type": "gsampler3D",
					"name": "s"
				},
				{
					"type": "vec3",
					"name": "p"
				},
				{
					"type": "vec2",
					"name": "dPdx"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = textureGrad({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a texture read with explicit gradients.",
			"name": "dPdy",
			"inputs": [],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = dPdy);"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a texture read with explicit gradients.",
			"name": "textureGrad",
			"inputs": [
				{
					"type": "samplerCube",
					"name": "s"
				},
				{
					"type": "vec3",
					"name": "p"
				},
				{
					"type": "vec3",
					"name": "dPdx"
				},
				{
					"type": "vec3",
					"name": "dPdy"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = textureGrad({i0},{i1},{i2},{i3});"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a texture read with explicit gradients.",
			"name": "textureGrad",
			"inputs": [
				{
					"type": "samplerCubeArray",
					"name": "s"
				},
				{
					"type": "vec3",
					"name": "p"
				},
				{
					"type": "vec3",
					"name": "dPdx"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = textureGrad({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a texture read with explicit gradients.",
			"name": "dPdy",
			"inputs": [],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = dPdy);"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a texture read with projection/LOD and with explicit\ngradients.",
			"name": "textureProjGrad",
			"inputs": [
				{
					"type": "gsampler2D",
					"name": "s"
				},
				{
					"type": "vec3",
					"name": "p"
				},
				{
					"type": "vec2",
					"name": "dPdx"
				},
				{
					"type": "vec2",
					"name": "dPdy"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = textureProjGrad({i0},{i1},{i2},{i3});"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a texture read with projection/LOD and with explicit\ngradients.",
			"name": "textureProjGrad",
			"inputs": [
				{
					"type": "gsampler2D",
					"name": "s"
				},
				{
					"type": "vec4",
					"name": "p"
				},
				{
					"type": "vec2",
					"name": "dPdx"
				},
				{
					"type": "vec2",
					"name": "dPdy"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = textureProjGrad({i0},{i1},{i2},{i3});"
		},
		{
			"category": "Uncategorized",
			"description": "Performs a texture read with projection/LOD and with explicit\ngradients.",
			"name": "textureProjGrad",
			"inputs": [
				{
					"type": "gsampler3D",
					"name": "s"
				},
				{
					"type": "vec4",
					"name": "p"
				},
				{
					"type": "vec3",
					"name": "dPdx"
				},
				{
					"type": "vec3",
					"name": "dPdy"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = textureProjGrad({i0},{i1},{i2},{i3});"
		},
		{
			"category": "Uncategorized",
			"description": "Fetches a single texel using integer coordinates.\nThe LOD defines which mipmap level is used. An LOD value of 0\nwill use the full resolution texture.\n",
			"name": "texelFetch",
			"inputs": [
				{
					"type": "gsampler2D",
					"name": "s"
				},
				{
					"type": "ivec2",
					"name": "p"
				},
				{
					"type": "int",
					"name": "lod"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = texelFetch({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Fetches a single texel using integer coordinates.\nThe LOD defines which mipmap level is used. An LOD value of 0\nwill use the full resolution texture.\n",
			"name": "texelFetch",
			"inputs": [
				{
					"type": "gsampler2DArray",
					"name": "s"
				},
				{
					"type": "ivec3",
					"name": "p"
				},
				{
					"type": "int",
					"name": "lod"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = texelFetch({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Fetches a single texel using integer coordinates.\nThe LOD defines which mipmap level is used. An LOD value of 0\nwill use the full resolution texture.\n",
			"name": "texelFetch",
			"inputs": [
				{
					"type": "gsampler3D",
					"name": "s"
				},
				{
					"type": "ivec3",
					"name": "p"
				},
				{
					"type": "int",
					"name": "lod"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = texelFetch({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Gathers four texels from a texture.\nUse comps within range of 0..3 to\ndefine which component (x, y, z, w) is returned.\nIf comps is not provided: 0 (or x-component) is used.",
			"name": "textureGather",
			"inputs": [
				{
					"type": "gsampler2D",
					"name": "s"
				},
				{
					"type": "vec2",
					"name": "p"
				},
				{
					"type": "[",
					"name": "int"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = textureGather({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Gathers four texels from a texture.\nUse comps within range of 0..3 to\ndefine which component (x, y, z, w) is returned.\nIf comps is not provided: 0 (or x-component) is used.",
			"name": "textureGather",
			"inputs": [
				{
					"type": "gsampler2DArray",
					"name": "s"
				},
				{
					"type": "vec3",
					"name": "p"
				},
				{
					"type": "[",
					"name": "int"
				}
			],
			"outputs": [
				{
					"type": "gvec4_type",
					"name": "result"
				}
			],
			"code": "{o0} = textureGather({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Gathers four texels from a texture.\nUse comps within range of 0..3 to\ndefine which component (x, y, z, w) is returned.\nIf comps is not provided: 0 (or x-component) is used.",
			"name": "textureGather",
			"inputs": [
				{
					"type": "samplerCube",
					"name": "s"
				},
				{
					"type": "vec3",
					"name": "p"
				},
				{
					"type": "[",
					"name": "int"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = textureGather({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Derivative in x using local differencing.\nInternally, can use either dFdxCoarse or dFdxFine, but the\ndecision for which to use is made by the GPU driver.",
			"name": "dFdx",
			"inputs": [
				{
					"type": "float",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = dFdx({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Derivative in x using local differencing.\nInternally, can use either dFdxCoarse or dFdxFine, but the\ndecision for which to use is made by the GPU driver.",
			"name": "dFdx",
			"inputs": [
				{
					"type": "vec2",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = dFdx({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Derivative in x using local differencing.\nInternally, can use either dFdxCoarse or dFdxFine, but the\ndecision for which to use is made by the GPU driver.",
			"name": "dFdx",
			"inputs": [
				{
					"type": "vec3",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = dFdx({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Derivative in x using local differencing.\nInternally, can use either dFdxCoarse or dFdxFine, but the\ndecision for which to use is made by the GPU driver.",
			"name": "dFdx",
			"inputs": [
				{
					"type": "vec4",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = dFdx({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Calculates derivative with respect to x window coordinate using\nlocal differencing based on the value of p for the current\nfragment neighbour(s), and will possibly, but not necessarily,\ninclude the value for the current fragment.\nThis function is not available on gl_compatibility profile.",
			"name": "dFdxCoarse",
			"inputs": [
				{
					"type": "float",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = dFdxCoarse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Calculates derivative with respect to x window coordinate using\nlocal differencing based on the value of p for the current\nfragment neighbour(s), and will possibly, but not necessarily,\ninclude the value for the current fragment.\nThis function is not available on gl_compatibility profile.",
			"name": "dFdxCoarse",
			"inputs": [
				{
					"type": "vec2",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = dFdxCoarse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Calculates derivative with respect to x window coordinate using\nlocal differencing based on the value of p for the current\nfragment neighbour(s), and will possibly, but not necessarily,\ninclude the value for the current fragment.\nThis function is not available on gl_compatibility profile.",
			"name": "dFdxCoarse",
			"inputs": [
				{
					"type": "vec3",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = dFdxCoarse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Calculates derivative with respect to x window coordinate using\nlocal differencing based on the value of p for the current\nfragment neighbour(s), and will possibly, but not necessarily,\ninclude the value for the current fragment.\nThis function is not available on gl_compatibility profile.",
			"name": "dFdxCoarse",
			"inputs": [
				{
					"type": "vec4",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = dFdxCoarse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Calculates derivative with respect to x window coordinate using\nlocal differencing based on the value of p for the current\nfragment and its immediate neighbour(s).\nThis function is not available on gl_compatibility profile.",
			"name": "dFdxFine",
			"inputs": [
				{
					"type": "float",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = dFdxFine({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Calculates derivative with respect to x window coordinate using\nlocal differencing based on the value of p for the current\nfragment and its immediate neighbour(s).\nThis function is not available on gl_compatibility profile.",
			"name": "dFdxFine",
			"inputs": [
				{
					"type": "vec2",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = dFdxFine({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Calculates derivative with respect to x window coordinate using\nlocal differencing based on the value of p for the current\nfragment and its immediate neighbour(s).\nThis function is not available on gl_compatibility profile.",
			"name": "dFdxFine",
			"inputs": [
				{
					"type": "vec3",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = dFdxFine({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Calculates derivative with respect to x window coordinate using\nlocal differencing based on the value of p for the current\nfragment and its immediate neighbour(s).\nThis function is not available on gl_compatibility profile.",
			"name": "dFdxFine",
			"inputs": [
				{
					"type": "vec4",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = dFdxFine({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Derivative in y using local differencing.\nInternally, can use either dFdyCoarse or dFdyFine, but the\ndecision for which to use is made by the GPU driver.",
			"name": "dFdy",
			"inputs": [
				{
					"type": "float",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = dFdy({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Derivative in y using local differencing.\nInternally, can use either dFdyCoarse or dFdyFine, but the\ndecision for which to use is made by the GPU driver.",
			"name": "dFdy",
			"inputs": [
				{
					"type": "vec2",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = dFdy({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Derivative in y using local differencing.\nInternally, can use either dFdyCoarse or dFdyFine, but the\ndecision for which to use is made by the GPU driver.",
			"name": "dFdy",
			"inputs": [
				{
					"type": "vec3",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = dFdy({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Derivative in y using local differencing.\nInternally, can use either dFdyCoarse or dFdyFine, but the\ndecision for which to use is made by the GPU driver.",
			"name": "dFdy",
			"inputs": [
				{
					"type": "vec4",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = dFdy({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Calculates derivative with respect to y window coordinate using\nlocal differencing based on the value of p for the current\nfragment neighbour(s), and will possibly, but not necessarily,\ninclude the value for the current fragment.\nThis function is not available on gl_compatibility profile.",
			"name": "dFdyCoarse",
			"inputs": [
				{
					"type": "float",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = dFdyCoarse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Calculates derivative with respect to y window coordinate using\nlocal differencing based on the value of p for the current\nfragment neighbour(s), and will possibly, but not necessarily,\ninclude the value for the current fragment.\nThis function is not available on gl_compatibility profile.",
			"name": "dFdyCoarse",
			"inputs": [
				{
					"type": "vec2",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = dFdyCoarse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Calculates derivative with respect to y window coordinate using\nlocal differencing based on the value of p for the current\nfragment neighbour(s), and will possibly, but not necessarily,\ninclude the value for the current fragment.\nThis function is not available on gl_compatibility profile.",
			"name": "dFdyCoarse",
			"inputs": [
				{
					"type": "vec3",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = dFdyCoarse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Calculates derivative with respect to y window coordinate using\nlocal differencing based on the value of p for the current\nfragment neighbour(s), and will possibly, but not necessarily,\ninclude the value for the current fragment.\nThis function is not available on gl_compatibility profile.",
			"name": "dFdyCoarse",
			"inputs": [
				{
					"type": "vec4",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = dFdyCoarse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Calculates derivative with respect to y window coordinate using\nlocal differencing based on the value of p for the current\nfragment and its immediate neighbour(s).\nThis function is not available on gl_compatibility profile.",
			"name": "dFdyFine",
			"inputs": [
				{
					"type": "float",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = dFdyFine({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Calculates derivative with respect to y window coordinate using\nlocal differencing based on the value of p for the current\nfragment and its immediate neighbour(s).\nThis function is not available on gl_compatibility profile.",
			"name": "dFdyFine",
			"inputs": [
				{
					"type": "vec2",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = dFdyFine({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Calculates derivative with respect to y window coordinate using\nlocal differencing based on the value of p for the current\nfragment and its immediate neighbour(s).\nThis function is not available on gl_compatibility profile.",
			"name": "dFdyFine",
			"inputs": [
				{
					"type": "vec3",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = dFdyFine({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Calculates derivative with respect to y window coordinate using\nlocal differencing based on the value of p for the current\nfragment and its immediate neighbour(s).\nThis function is not available on gl_compatibility profile.",
			"name": "dFdyFine",
			"inputs": [
				{
					"type": "vec4",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = dFdyFine({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sum of absolute derivative in x and y.\nThis is the equivalent of using abs(dFdx(p)) + abs(dFdy(p)).",
			"name": "fwidth",
			"inputs": [
				{
					"type": "float",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = fwidth({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sum of absolute derivative in x and y.\nThis is the equivalent of using abs(dFdx(p)) + abs(dFdy(p)).",
			"name": "fwidth",
			"inputs": [
				{
					"type": "vec2",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = fwidth({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sum of absolute derivative in x and y.\nThis is the equivalent of using abs(dFdx(p)) + abs(dFdy(p)).",
			"name": "fwidth",
			"inputs": [
				{
					"type": "vec3",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = fwidth({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sum of absolute derivative in x and y.\nThis is the equivalent of using abs(dFdx(p)) + abs(dFdy(p)).",
			"name": "fwidth",
			"inputs": [
				{
					"type": "vec4",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = fwidth({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sum of absolute derivative in x and y.\nThis is the equivalent of using\nabs(dFdxCoarse(p)) + abs(dFdyCoarse(p)).\nThis function is not available on gl_compatibility profile.",
			"name": "fwidthCoarse",
			"inputs": [
				{
					"type": "float",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = fwidthCoarse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sum of absolute derivative in x and y.\nThis is the equivalent of using\nabs(dFdxCoarse(p)) + abs(dFdyCoarse(p)).\nThis function is not available on gl_compatibility profile.",
			"name": "fwidthCoarse",
			"inputs": [
				{
					"type": "vec2",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = fwidthCoarse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sum of absolute derivative in x and y.\nThis is the equivalent of using\nabs(dFdxCoarse(p)) + abs(dFdyCoarse(p)).\nThis function is not available on gl_compatibility profile.",
			"name": "fwidthCoarse",
			"inputs": [
				{
					"type": "vec3",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = fwidthCoarse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sum of absolute derivative in x and y.\nThis is the equivalent of using\nabs(dFdxCoarse(p)) + abs(dFdyCoarse(p)).\nThis function is not available on gl_compatibility profile.",
			"name": "fwidthCoarse",
			"inputs": [
				{
					"type": "vec4",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = fwidthCoarse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sum of absolute derivative in x and y.\nThis is the equivalent of using\nabs(dFdxFine(p)) + abs(dFdyFine(p)).\nThis function is not available on gl_compatibility profile.",
			"name": "fwidthFine",
			"inputs": [
				{
					"type": "float",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				}
			],
			"code": "{o0} = fwidthFine({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sum of absolute derivative in x and y.\nThis is the equivalent of using\nabs(dFdxFine(p)) + abs(dFdyFine(p)).\nThis function is not available on gl_compatibility profile.",
			"name": "fwidthFine",
			"inputs": [
				{
					"type": "vec2",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = fwidthFine({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sum of absolute derivative in x and y.\nThis is the equivalent of using\nabs(dFdxFine(p)) + abs(dFdyFine(p)).\nThis function is not available on gl_compatibility profile.",
			"name": "fwidthFine",
			"inputs": [
				{
					"type": "vec3",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				}
			],
			"code": "{o0} = fwidthFine({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Sum of absolute derivative in x and y.\nThis is the equivalent of using\nabs(dFdxFine(p)) + abs(dFdyFine(p)).\nThis function is not available on gl_compatibility profile.",
			"name": "fwidthFine",
			"inputs": [
				{
					"type": "vec4",
					"name": "p"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = fwidthFine({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Convert two 32-bit floating-point numbers into 16-bit\nand pack them into a 32-bit unsigned integer and vice-versa.",
			"name": "packHalf2x16",
			"inputs": [
				{
					"type": "vec2",
					"name": "v"
				}
			],
			"outputs": [
				{
					"type": "uint",
					"name": "result"
				}
			],
			"code": "{o0} = packHalf2x16({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Convert two 32-bit floating-point numbers into 16-bit\nand pack them into a 32-bit unsigned integer and vice-versa.",
			"name": "unpackHalf2x16",
			"inputs": [
				{
					"type": "uint",
					"name": "v"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = unpackHalf2x16({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Convert two 32-bit floating-point numbers (clamped\nwithin 0..1 range) into 16-bit and pack them\ninto a 32-bit unsigned integer and vice-versa.",
			"name": "packUnorm2x16",
			"inputs": [
				{
					"type": "vec2",
					"name": "v"
				}
			],
			"outputs": [
				{
					"type": "uint",
					"name": "result"
				}
			],
			"code": "{o0} = packUnorm2x16({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Convert two 32-bit floating-point numbers (clamped\nwithin 0..1 range) into 16-bit and pack them\ninto a 32-bit unsigned integer and vice-versa.",
			"name": "unpackUnorm2x16",
			"inputs": [
				{
					"type": "uint",
					"name": "v"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = unpackUnorm2x16({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Convert two 32-bit floating-point numbers (clamped\nwithin -1..1 range) into 16-bit and pack them\ninto a 32-bit unsigned integer and vice-versa.",
			"name": "packSnorm2x16",
			"inputs": [
				{
					"type": "vec2",
					"name": "v"
				}
			],
			"outputs": [
				{
					"type": "uint",
					"name": "result"
				}
			],
			"code": "{o0} = packSnorm2x16({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Convert two 32-bit floating-point numbers (clamped\nwithin -1..1 range) into 16-bit and pack them\ninto a 32-bit unsigned integer and vice-versa.",
			"name": "unpackSnorm2x16",
			"inputs": [
				{
					"type": "uint",
					"name": "v"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				}
			],
			"code": "{o0} = unpackSnorm2x16({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Convert four 32-bit floating-point numbers (clamped\nwithin 0..1 range) into 8-bit and pack them\ninto a 32-bit unsigned integer and vice-versa.",
			"name": "packUnorm4x8",
			"inputs": [
				{
					"type": "vec4",
					"name": "v"
				}
			],
			"outputs": [
				{
					"type": "uint",
					"name": "result"
				}
			],
			"code": "{o0} = packUnorm4x8({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Convert four 32-bit floating-point numbers (clamped\nwithin 0..1 range) into 8-bit and pack them\ninto a 32-bit unsigned integer and vice-versa.",
			"name": "unpackUnorm4x8",
			"inputs": [
				{
					"type": "uint",
					"name": "v"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = unpackUnorm4x8({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Convert four 32-bit floating-point numbers (clamped\nwithin -1..1 range) into 8-bit and pack them\ninto a 32-bit unsigned integer and vice-versa.",
			"name": "packSnorm4x8",
			"inputs": [
				{
					"type": "vec4",
					"name": "v"
				}
			],
			"outputs": [
				{
					"type": "uint",
					"name": "result"
				}
			],
			"code": "{o0} = packSnorm4x8({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Convert four 32-bit floating-point numbers (clamped\nwithin -1..1 range) into 8-bit and pack them\ninto a 32-bit unsigned integer and vice-versa.",
			"name": "unpackSnorm4x8",
			"inputs": [
				{
					"type": "uint",
					"name": "v"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				}
			],
			"code": "{o0} = unpackSnorm4x8({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Extracts a range of bits from an integer.",
			"name": "bitfieldExtract",
			"inputs": [
				{
					"type": "int",
					"name": "value"
				},
				{
					"type": "int",
					"name": "offset"
				},
				{
					"type": "int",
					"name": "bits"
				}
			],
			"outputs": [
				{
					"type": "int",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldExtract({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Extracts a range of bits from an integer.",
			"name": "bitfieldExtract",
			"inputs": [
				{
					"type": "ivec2",
					"name": "value"
				},
				{
					"type": "int",
					"name": "offset"
				},
				{
					"type": "int",
					"name": "bits"
				}
			],
			"outputs": [
				{
					"type": "ivec2",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldExtract({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Extracts a range of bits from an integer.",
			"name": "bitfieldExtract",
			"inputs": [
				{
					"type": "ivec3",
					"name": "value"
				},
				{
					"type": "int",
					"name": "offset"
				},
				{
					"type": "int",
					"name": "bits"
				}
			],
			"outputs": [
				{
					"type": "ivec3",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldExtract({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Extracts a range of bits from an integer.",
			"name": "bitfieldExtract",
			"inputs": [
				{
					"type": "ivec4",
					"name": "value"
				},
				{
					"type": "int",
					"name": "offset"
				},
				{
					"type": "int",
					"name": "bits"
				}
			],
			"outputs": [
				{
					"type": "ivec4",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldExtract({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Extracts a range of bits from an integer.",
			"name": "bitfieldExtract",
			"inputs": [
				{
					"type": "uint",
					"name": "value"
				},
				{
					"type": "int",
					"name": "offset"
				},
				{
					"type": "int",
					"name": "bits"
				}
			],
			"outputs": [
				{
					"type": "uint",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldExtract({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Extracts a range of bits from an integer.",
			"name": "bitfieldExtract",
			"inputs": [
				{
					"type": "uvec2",
					"name": "value"
				},
				{
					"type": "int",
					"name": "offset"
				},
				{
					"type": "int",
					"name": "bits"
				}
			],
			"outputs": [
				{
					"type": "uvec2",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldExtract({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Extracts a range of bits from an integer.",
			"name": "bitfieldExtract",
			"inputs": [
				{
					"type": "uvec3",
					"name": "value"
				},
				{
					"type": "int",
					"name": "offset"
				},
				{
					"type": "int",
					"name": "bits"
				}
			],
			"outputs": [
				{
					"type": "uvec3",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldExtract({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Extracts a range of bits from an integer.",
			"name": "bitfieldExtract",
			"inputs": [
				{
					"type": "uvec4",
					"name": "value"
				},
				{
					"type": "int",
					"name": "offset"
				},
				{
					"type": "int",
					"name": "bits"
				}
			],
			"outputs": [
				{
					"type": "uvec4",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldExtract({i0},{i1},{i2});"
		},
		{
			"category": "Uncategorized",
			"description": "Insert a range of bits into an integer.",
			"name": "bitfieldInsert",
			"inputs": [
				{
					"type": "int",
					"name": "base"
				},
				{
					"type": "int",
					"name": "insert"
				}
			],
			"outputs": [
				{
					"type": "int",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldInsert({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Insert a range of bits into an integer.",
			"name": "bitfieldInsert",
			"inputs": [
				{
					"type": "ivec2",
					"name": "base"
				},
				{
					"type": "ivec2",
					"name": "insert"
				}
			],
			"outputs": [
				{
					"type": "ivec2",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldInsert({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Insert a range of bits into an integer.",
			"name": "bitfieldInsert",
			"inputs": [
				{
					"type": "ivec3",
					"name": "base"
				},
				{
					"type": "ivec3",
					"name": "insert"
				}
			],
			"outputs": [
				{
					"type": "ivec3",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldInsert({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Insert a range of bits into an integer.",
			"name": "bitfieldInsert",
			"inputs": [
				{
					"type": "ivec4",
					"name": "base"
				},
				{
					"type": "ivec4",
					"name": "insert"
				}
			],
			"outputs": [
				{
					"type": "ivec4",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldInsert({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Insert a range of bits into an integer.",
			"name": "offset",
			"inputs": [
				{
					"type": "int",
					"name": "bits"
				}
			],
			"outputs": [
				{
					"type": "int",
					"name": "result"
				}
			],
			"code": "{o0} = offset({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Insert a range of bits into an integer.",
			"name": "bitfieldInsert",
			"inputs": [
				{
					"type": "uint",
					"name": "base"
				},
				{
					"type": "uint",
					"name": "insert"
				}
			],
			"outputs": [
				{
					"type": "uint",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldInsert({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Insert a range of bits into an integer.",
			"name": "bitfieldInsert",
			"inputs": [
				{
					"type": "uvec2",
					"name": "base"
				},
				{
					"type": "uvec2",
					"name": "insert"
				}
			],
			"outputs": [
				{
					"type": "uvec2",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldInsert({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Insert a range of bits into an integer.",
			"name": "bitfieldInsert",
			"inputs": [
				{
					"type": "uvec3",
					"name": "base"
				},
				{
					"type": "uvec3",
					"name": "insert"
				}
			],
			"outputs": [
				{
					"type": "uvec3",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldInsert({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Insert a range of bits into an integer.",
			"name": "bitfieldInsert",
			"inputs": [
				{
					"type": "uvec4",
					"name": "base"
				},
				{
					"type": "uvec4",
					"name": "insert"
				}
			],
			"outputs": [
				{
					"type": "uvec4",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldInsert({i0},{i1});"
		},
		{
			"category": "Uncategorized",
			"description": "Insert a range of bits into an integer.",
			"name": "offset",
			"inputs": [
				{
					"type": "int",
					"name": "bits"
				}
			],
			"outputs": [
				{
					"type": "int",
					"name": "result"
				}
			],
			"code": "{o0} = offset({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Reverse the order of bits in an integer.",
			"name": "bitfieldReverse",
			"inputs": [
				{
					"type": "int",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "int",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldReverse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Reverse the order of bits in an integer.",
			"name": "bitfieldReverse",
			"inputs": [
				{
					"type": "ivec2",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "ivec2",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldReverse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Reverse the order of bits in an integer.",
			"name": "bitfieldReverse",
			"inputs": [
				{
					"type": "ivec3",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "ivec3",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldReverse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Reverse the order of bits in an integer.",
			"name": "bitfieldReverse",
			"inputs": [
				{
					"type": "ivec4",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "ivec4",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldReverse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Reverse the order of bits in an integer.",
			"name": "bitfieldReverse",
			"inputs": [
				{
					"type": "uint",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "uint",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldReverse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Reverse the order of bits in an integer.",
			"name": "bitfieldReverse",
			"inputs": [
				{
					"type": "uvec2",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "uvec2",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldReverse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Reverse the order of bits in an integer.",
			"name": "bitfieldReverse",
			"inputs": [
				{
					"type": "uvec3",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "uvec3",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldReverse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Reverse the order of bits in an integer.",
			"name": "bitfieldReverse",
			"inputs": [
				{
					"type": "uvec4",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "uvec4",
					"name": "result"
				}
			],
			"code": "{o0} = bitfieldReverse({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Counts the number of 1 bits in an integer.",
			"name": "bitCount",
			"inputs": [
				{
					"type": "int",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "int",
					"name": "result"
				}
			],
			"code": "{o0} = bitCount({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Counts the number of 1 bits in an integer.",
			"name": "bitCount",
			"inputs": [
				{
					"type": "ivec2",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "ivec2",
					"name": "result"
				}
			],
			"code": "{o0} = bitCount({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Counts the number of 1 bits in an integer.",
			"name": "bitCount",
			"inputs": [
				{
					"type": "ivec3",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "ivec3",
					"name": "result"
				}
			],
			"code": "{o0} = bitCount({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Counts the number of 1 bits in an integer.",
			"name": "bitCount",
			"inputs": [
				{
					"type": "ivec4",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "ivec4",
					"name": "result"
				}
			],
			"code": "{o0} = bitCount({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Counts the number of 1 bits in an integer.",
			"name": "bitCount",
			"inputs": [
				{
					"type": "uint",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "uint",
					"name": "result"
				}
			],
			"code": "{o0} = bitCount({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Counts the number of 1 bits in an integer.",
			"name": "bitCount",
			"inputs": [
				{
					"type": "uvec2",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "uvec2",
					"name": "result"
				}
			],
			"code": "{o0} = bitCount({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Counts the number of 1 bits in an integer.",
			"name": "bitCount",
			"inputs": [
				{
					"type": "uvec3",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "uvec3",
					"name": "result"
				}
			],
			"code": "{o0} = bitCount({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Counts the number of 1 bits in an integer.",
			"name": "bitCount",
			"inputs": [
				{
					"type": "uvec4",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "uvec4",
					"name": "result"
				}
			],
			"code": "{o0} = bitCount({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Find the index of the least significant bit set to 1 in an integer.",
			"name": "findLSB",
			"inputs": [
				{
					"type": "int",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "int",
					"name": "result"
				}
			],
			"code": "{o0} = findLSB({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Find the index of the least significant bit set to 1 in an integer.",
			"name": "findLSB",
			"inputs": [
				{
					"type": "ivec2",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "ivec2",
					"name": "result"
				}
			],
			"code": "{o0} = findLSB({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Find the index of the least significant bit set to 1 in an integer.",
			"name": "findLSB",
			"inputs": [
				{
					"type": "ivec3",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "ivec3",
					"name": "result"
				}
			],
			"code": "{o0} = findLSB({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Find the index of the least significant bit set to 1 in an integer.",
			"name": "findLSB",
			"inputs": [
				{
					"type": "ivec4",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "ivec4",
					"name": "result"
				}
			],
			"code": "{o0} = findLSB({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Find the index of the least significant bit set to 1 in an integer.",
			"name": "findLSB",
			"inputs": [
				{
					"type": "uint",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "uint",
					"name": "result"
				}
			],
			"code": "{o0} = findLSB({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Find the index of the least significant bit set to 1 in an integer.",
			"name": "findLSB",
			"inputs": [
				{
					"type": "uvec2",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "uvec2",
					"name": "result"
				}
			],
			"code": "{o0} = findLSB({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Find the index of the least significant bit set to 1 in an integer.",
			"name": "findLSB",
			"inputs": [
				{
					"type": "uvec3",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "uvec3",
					"name": "result"
				}
			],
			"code": "{o0} = findLSB({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Find the index of the least significant bit set to 1 in an integer.",
			"name": "findLSB",
			"inputs": [
				{
					"type": "uvec4",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "uvec4",
					"name": "result"
				}
			],
			"code": "{o0} = findLSB({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Find the index of the most significant bit set to 1 in an integer.",
			"name": "findMSB",
			"inputs": [
				{
					"type": "int",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "int",
					"name": "result"
				}
			],
			"code": "{o0} = findMSB({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Find the index of the most significant bit set to 1 in an integer.",
			"name": "findMSB",
			"inputs": [
				{
					"type": "ivec2",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "ivec2",
					"name": "result"
				}
			],
			"code": "{o0} = findMSB({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Find the index of the most significant bit set to 1 in an integer.",
			"name": "findMSB",
			"inputs": [
				{
					"type": "ivec3",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "ivec3",
					"name": "result"
				}
			],
			"code": "{o0} = findMSB({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Find the index of the most significant bit set to 1 in an integer.",
			"name": "findMSB",
			"inputs": [
				{
					"type": "ivec4",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "ivec4",
					"name": "result"
				}
			],
			"code": "{o0} = findMSB({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Find the index of the most significant bit set to 1 in an integer.",
			"name": "findMSB",
			"inputs": [
				{
					"type": "uint",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "uint",
					"name": "result"
				}
			],
			"code": "{o0} = findMSB({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Find the index of the most significant bit set to 1 in an integer.",
			"name": "findMSB",
			"inputs": [
				{
					"type": "uvec2",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "uvec2",
					"name": "result"
				}
			],
			"code": "{o0} = findMSB({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Find the index of the most significant bit set to 1 in an integer.",
			"name": "findMSB",
			"inputs": [
				{
					"type": "uvec3",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "uvec3",
					"name": "result"
				}
			],
			"code": "{o0} = findMSB({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Find the index of the most significant bit set to 1 in an integer.",
			"name": "findMSB",
			"inputs": [
				{
					"type": "uvec4",
					"name": "value"
				}
			],
			"outputs": [
				{
					"type": "uvec4",
					"name": "result"
				}
			],
			"code": "{o0} = findMSB({i0});"
		},
		{
			"category": "Uncategorized",
			"description": "Multiplies two 32-bit numbers and produce a 64-bit result.\nx - the first number.\ny - the second number.\nmsb - will contain the most significant bits.\nlsb - will contain the least significant bits.",
			"name": "imulExtended",
			"inputs": [
				{
					"type": "int",
					"name": "x"
				},
				{
					"type": "int",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "int",
					"name": "msb"
				}
			],
			"code": "imulExtended({i0},{i1},{o0});"
		},
		{
			"category": "Uncategorized",
			"description": "Multiplies two 32-bit numbers and produce a 64-bit result.\nx - the first number.\ny - the second number.\nmsb - will contain the most significant bits.\nlsb - will contain the least significant bits.",
			"name": "imulExtended",
			"inputs": [
				{
					"type": "ivec2",
					"name": "x"
				},
				{
					"type": "ivec2",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "ivec2",
					"name": "msb"
				}
			],
			"code": "imulExtended({i0},{i1},{o0});"
		},
		{
			"category": "Uncategorized",
			"description": "Multiplies two 32-bit numbers and produce a 64-bit result.\nx - the first number.\ny - the second number.\nmsb - will contain the most significant bits.\nlsb - will contain the least significant bits.",
			"name": "imulExtended",
			"inputs": [
				{
					"type": "ivec3",
					"name": "x"
				},
				{
					"type": "ivec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "ivec3",
					"name": "msb"
				}
			],
			"code": "imulExtended({i0},{i1},{o0});"
		},
		{
			"category": "Uncategorized",
			"description": "Multiplies two 32-bit numbers and produce a 64-bit result.\nx - the first number.\ny - the second number.\nmsb - will contain the most significant bits.\nlsb - will contain the least significant bits.",
			"name": "imulExtended",
			"inputs": [
				{
					"type": "ivec4",
					"name": "x"
				},
				{
					"type": "ivec4",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "ivec4",
					"name": "msb"
				}
			],
			"code": "imulExtended({i0},{i1},{o0});"
		},
		{
			"category": "Uncategorized",
			"description": "Multiplies two 32-bit numbers and produce a 64-bit result.\nx - the first number.\ny - the second number.\nmsb - will contain the most significant bits.\nlsb - will contain the least significant bits.",
			"name": "ivec_type",
			"inputs": [],
			"outputs": [
				{
					"type": "out",
					"name": "result"
				}
			],
			"code": "{o0} = ivec_type);"
		},
		{
			"category": "Uncategorized",
			"description": "Multiplies two 32-bit numbers and produce a 64-bit result.\nx - the first number.\ny - the second number.\nmsb - will contain the most significant bits.\nlsb - will contain the least significant bits.",
			"name": "umulExtended",
			"inputs": [
				{
					"type": "uint",
					"name": "x"
				},
				{
					"type": "uint",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "uint",
					"name": "msb"
				}
			],
			"code": "umulExtended({i0},{i1},{o0});"
		},
		{
			"category": "Uncategorized",
			"description": "Multiplies two 32-bit numbers and produce a 64-bit result.\nx - the first number.\ny - the second number.\nmsb - will contain the most significant bits.\nlsb - will contain the least significant bits.",
			"name": "umulExtended",
			"inputs": [
				{
					"type": "uvec2",
					"name": "x"
				},
				{
					"type": "uvec2",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "uvec2",
					"name": "msb"
				}
			],
			"code": "umulExtended({i0},{i1},{o0});"
		},
		{
			"category": "Uncategorized",
			"description": "Multiplies two 32-bit numbers and produce a 64-bit result.\nx - the first number.\ny - the second number.\nmsb - will contain the most significant bits.\nlsb - will contain the least significant bits.",
			"name": "umulExtended",
			"inputs": [
				{
					"type": "uvec3",
					"name": "x"
				},
				{
					"type": "uvec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "uvec3",
					"name": "msb"
				}
			],
			"code": "umulExtended({i0},{i1},{o0});"
		},
		{
			"category": "Uncategorized",
			"description": "Multiplies two 32-bit numbers and produce a 64-bit result.\nx - the first number.\ny - the second number.\nmsb - will contain the most significant bits.\nlsb - will contain the least significant bits.",
			"name": "umulExtended",
			"inputs": [
				{
					"type": "uvec4",
					"name": "x"
				},
				{
					"type": "uvec4",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "uvec4",
					"name": "msb"
				}
			],
			"code": "umulExtended({i0},{i1},{o0});"
		},
		{
			"category": "Uncategorized",
			"description": "Multiplies two 32-bit numbers and produce a 64-bit result.\nx - the first number.\ny - the second number.\nmsb - will contain the most significant bits.\nlsb - will contain the least significant bits.",
			"name": "uvec_type",
			"inputs": [],
			"outputs": [
				{
					"type": "out",
					"name": "result"
				}
			],
			"code": "{o0} = uvec_type);"
		},
		{
			"category": "Uncategorized",
			"description": "Adds two unsigned integers and generates carry.",
			"name": "uaddCarry",
			"inputs": [
				{
					"type": "uint",
					"name": "x"
				},
				{
					"type": "uint",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "uint",
					"name": "result"
				},
				{
					"type": "uint",
					"name": "carry"
				}
			],
			"code": "{o0} = uaddCarry({i0},{i1},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Adds two unsigned integers and generates carry.",
			"name": "uaddCarry",
			"inputs": [
				{
					"type": "uvec2",
					"name": "x"
				},
				{
					"type": "uvec2",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "uvec2",
					"name": "result"
				},
				{
					"type": "uvec2",
					"name": "carry"
				}
			],
			"code": "{o0} = uaddCarry({i0},{i1},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Adds two unsigned integers and generates carry.",
			"name": "uaddCarry",
			"inputs": [
				{
					"type": "uvec3",
					"name": "x"
				},
				{
					"type": "uvec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "uvec3",
					"name": "result"
				},
				{
					"type": "uvec3",
					"name": "carry"
				}
			],
			"code": "{o0} = uaddCarry({i0},{i1},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Adds two unsigned integers and generates carry.",
			"name": "uaddCarry",
			"inputs": [
				{
					"type": "uvec4",
					"name": "x"
				},
				{
					"type": "uvec4",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "uvec4",
					"name": "result"
				},
				{
					"type": "uvec4",
					"name": "carry"
				}
			],
			"code": "{o0} = uaddCarry({i0},{i1},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Subtracts two unsigned integers and generates borrow.",
			"name": "usubBorrow",
			"inputs": [
				{
					"type": "uint",
					"name": "x"
				},
				{
					"type": "uint",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "uint",
					"name": "result"
				},
				{
					"type": "uint",
					"name": "borrow"
				}
			],
			"code": "{o0} = usubBorrow({i0},{i1},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Subtracts two unsigned integers and generates borrow.",
			"name": "usubBorrow",
			"inputs": [
				{
					"type": "uvec2",
					"name": "x"
				},
				{
					"type": "uvec2",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "uvec2",
					"name": "result"
				},
				{
					"type": "uvec2",
					"name": "borrow"
				}
			],
			"code": "{o0} = usubBorrow({i0},{i1},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Subtracts two unsigned integers and generates borrow.",
			"name": "usubBorrow",
			"inputs": [
				{
					"type": "uvec3",
					"name": "x"
				},
				{
					"type": "uvec3",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "uvec3",
					"name": "result"
				},
				{
					"type": "uvec3",
					"name": "borrow"
				}
			],
			"code": "{o0} = usubBorrow({i0},{i1},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Subtracts two unsigned integers and generates borrow.",
			"name": "usubBorrow",
			"inputs": [
				{
					"type": "uvec4",
					"name": "x"
				},
				{
					"type": "uvec4",
					"name": "y"
				}
			],
			"outputs": [
				{
					"type": "uvec4",
					"name": "result"
				},
				{
					"type": "uvec4",
					"name": "borrow"
				}
			],
			"code": "{o0} = usubBorrow({i0},{i1},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Assemble a floating-point number from a value and exponent.\nIf this product is too large to be represented in the\nfloating-point type the result is undefined.\n",
			"name": "ldexp",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				},
				{
					"type": "ivec_type",
					"name": "exp"
				}
			],
			"code": "{o0} = ldexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Assemble a floating-point number from a value and exponent.\nIf this product is too large to be represented in the\nfloating-point type the result is undefined.\n",
			"name": "ldexp",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				},
				{
					"type": "ivec_type",
					"name": "exp"
				}
			],
			"code": "{o0} = ldexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Assemble a floating-point number from a value and exponent.\nIf this product is too large to be represented in the\nfloating-point type the result is undefined.\n",
			"name": "ldexp",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				},
				{
					"type": "int",
					"name": "exp"
				}
			],
			"code": "{o0} = ldexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Assemble a floating-point number from a value and exponent.\nIf this product is too large to be represented in the\nfloating-point type the result is undefined.\n",
			"name": "ldexp",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				},
				{
					"type": "ivec2",
					"name": "exp"
				}
			],
			"code": "{o0} = ldexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Assemble a floating-point number from a value and exponent.\nIf this product is too large to be represented in the\nfloating-point type the result is undefined.\n",
			"name": "ldexp",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				},
				{
					"type": "ivec3",
					"name": "exp"
				}
			],
			"code": "{o0} = ldexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Assemble a floating-point number from a value and exponent.\nIf this product is too large to be represented in the\nfloating-point type the result is undefined.\n",
			"name": "ldexp",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				},
				{
					"type": "ivec4",
					"name": "exp"
				}
			],
			"code": "{o0} = ldexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Assemble a floating-point number from a value and exponent.\nIf this product is too large to be represented in the\nfloating-point type the result is undefined.\n",
			"name": "ldexp",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				},
				{
					"type": "int",
					"name": "exp"
				}
			],
			"code": "{o0} = ldexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Assemble a floating-point number from a value and exponent.\nIf this product is too large to be represented in the\nfloating-point type the result is undefined.\n",
			"name": "ldexp",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				},
				{
					"type": "ivec2",
					"name": "exp"
				}
			],
			"code": "{o0} = ldexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Assemble a floating-point number from a value and exponent.\nIf this product is too large to be represented in the\nfloating-point type the result is undefined.\n",
			"name": "ldexp",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				},
				{
					"type": "ivec3",
					"name": "exp"
				}
			],
			"code": "{o0} = ldexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Assemble a floating-point number from a value and exponent.\nIf this product is too large to be represented in the\nfloating-point type the result is undefined.\n",
			"name": "ldexp",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				},
				{
					"type": "ivec4",
					"name": "exp"
				}
			],
			"code": "{o0} = ldexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Splits a floating-point number(x) into significand\n(in the range of [0.5, 1.0]) and an integral exponent.\nFor x equals zero the significand and exponent are both zero.\nFor x of infinity or NaN, the results are undefined.\n",
			"name": "frexp",
			"inputs": [
				{
					"type": "vec2",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec2",
					"name": "result"
				},
				{
					"type": "ivec_type",
					"name": "exp"
				}
			],
			"code": "{o0} = frexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Splits a floating-point number(x) into significand\n(in the range of [0.5, 1.0]) and an integral exponent.\nFor x equals zero the significand and exponent are both zero.\nFor x of infinity or NaN, the results are undefined.\n",
			"name": "frexp",
			"inputs": [
				{
					"type": "vec4",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec4",
					"name": "result"
				},
				{
					"type": "ivec_type",
					"name": "exp"
				}
			],
			"code": "{o0} = frexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Splits a floating-point number(x) into significand\n(in the range of [0.5, 1.0]) and an integral exponent.\nFor x equals zero the significand and exponent are both zero.\nFor x of infinity or NaN, the results are undefined.\n",
			"name": "frexp",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				},
				{
					"type": "int",
					"name": "exp"
				}
			],
			"code": "{o0} = frexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Splits a floating-point number(x) into significand\n(in the range of [0.5, 1.0]) and an integral exponent.\nFor x equals zero the significand and exponent are both zero.\nFor x of infinity or NaN, the results are undefined.\n",
			"name": "frexp",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				},
				{
					"type": "ivec2",
					"name": "exp"
				}
			],
			"code": "{o0} = frexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Splits a floating-point number(x) into significand\n(in the range of [0.5, 1.0]) and an integral exponent.\nFor x equals zero the significand and exponent are both zero.\nFor x of infinity or NaN, the results are undefined.\n",
			"name": "frexp",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				},
				{
					"type": "ivec3",
					"name": "exp"
				}
			],
			"code": "{o0} = frexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Splits a floating-point number(x) into significand\n(in the range of [0.5, 1.0]) and an integral exponent.\nFor x equals zero the significand and exponent are both zero.\nFor x of infinity or NaN, the results are undefined.\n",
			"name": "frexp",
			"inputs": [
				{
					"type": "float",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "float",
					"name": "result"
				},
				{
					"type": "ivec4",
					"name": "exp"
				}
			],
			"code": "{o0} = frexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Splits a floating-point number(x) into significand\n(in the range of [0.5, 1.0]) and an integral exponent.\nFor x equals zero the significand and exponent are both zero.\nFor x of infinity or NaN, the results are undefined.\n",
			"name": "frexp",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				},
				{
					"type": "int",
					"name": "exp"
				}
			],
			"code": "{o0} = frexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Splits a floating-point number(x) into significand\n(in the range of [0.5, 1.0]) and an integral exponent.\nFor x equals zero the significand and exponent are both zero.\nFor x of infinity or NaN, the results are undefined.\n",
			"name": "frexp",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				},
				{
					"type": "ivec2",
					"name": "exp"
				}
			],
			"code": "{o0} = frexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Splits a floating-point number(x) into significand\n(in the range of [0.5, 1.0]) and an integral exponent.\nFor x equals zero the significand and exponent are both zero.\nFor x of infinity or NaN, the results are undefined.\n",
			"name": "frexp",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				},
				{
					"type": "ivec3",
					"name": "exp"
				}
			],
			"code": "{o0} = frexp({i0},{o1});"
		},
		{
			"category": "Uncategorized",
			"description": "Splits a floating-point number(x) into significand\n(in the range of [0.5, 1.0]) and an integral exponent.\nFor x equals zero the significand and exponent are both zero.\nFor x of infinity or NaN, the results are undefined.\n",
			"name": "frexp",
			"inputs": [
				{
					"type": "vec3",
					"name": "x"
				}
			],
			"outputs": [
				{
					"type": "vec3",
					"name": "result"
				},
				{
					"type": "ivec4",
					"name": "exp"
				}
			],
			"code": "{o0} = frexp({i0},{o1});"
		}
	]
}
